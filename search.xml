<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[排序算法实现（php）]]></title>
      <url>http://hu820.github.io/2016/07/02/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%EF%BC%88php%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="external">计算机科学</a>所使用的排序算法通常被分类为：</p>
<ul>
<li>计算的<a href="https://zh.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E8%A4%87%E9%9B%9C%E6%80%A7%E7%90%86%E8%AB%96" target="_blank" rel="external">时间复杂度</a>（最差、平均、和最好性能），依据列表（list）的大小(<em>n</em>)。一般而言，好的性能是<a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7" target="_blank" rel="external">O</a>(<em>n</em> log <em>n</em>)，且坏的性能是O(<em>n</em>2)。对于一个排序理想的性能是<a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7" target="_blank" rel="external">O</a>(<em>n</em>)。仅使用一个抽象关键比较运算的排序算法总平均上总是至少需要O(<em>n</em> log <em>n</em>)。</li>
<li>内存使用量（以及其他电脑资源的使用）</li>
<li>稳定性：<strong>稳定排序算法</strong>会让原本有相等键值的纪录维持相对次序。也就是如果一个排序算法是<strong>稳定</strong>的，当有两个相等键值的纪录<em>R</em>和<em>S</em>，且在原本的列表中<em>R</em>出现在<em>S</em>之前，在排序过的列表中<em>R</em>也将会是在<em>S</em>之前。</li>
<li>依据排序的方法：插入、交换、选择、合并等等</li>
</ul>
<h2 id="排序算法列表"><a href="#排序算法列表" class="headerlink" title="排序算法列表"></a>排序算法列表</h2><h3 id="稳定的排序"><a href="#稳定的排序" class="headerlink" title="稳定的排序"></a>稳定的排序</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F" target="_blank" rel="external">冒泡排序</a>（bubble sort）— O(<em>n</em>2)</li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%B8%A1%E5%B0%BE%E9%85%92%E6%8E%92%E5%BA%8F" target="_blank" rel="external">鸡尾酒排序</a>（cocktail sort）—O(<em>n</em>2)</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F" target="_blank" rel="external">插入排序</a>（insertion sort）—O(<em>n</em>2)</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%A1%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="external">桶排序</a>（bucket sort）—O(<em>n</em>)；需要O(<em>k</em>)额外空间</li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F" target="_blank" rel="external">计数排序</a>（counting sort）—O(<em>n</em>+<em>k</em>)；需要O(<em>n</em>+<em>k</em>)额外空间</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="external">归并排序</a>（merge sort）—O(<em>n</em> log <em>n</em>)；需要O(<em>n</em>)额外空间</li>
<li>原地<a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="external">归并排序</a>— O(<em>n</em> log2 <em>n</em>)如果使用最佳的现在版本</li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91" target="_blank" rel="external">二叉排序树</a>排序（binary tree sort）— O(<em>n</em> log <em>n</em>)期望时间；O(<em>n</em>2)最坏时间；需要O(<em>n</em>)额外空间</li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%B8%BD%E5%B7%A2%E6%8E%92%E5%BA%8F" target="_blank" rel="external">鸽巢排序</a>（pigeonhole sort）—O(<em>n</em>+<em>k</em>)；需要O(<em>k</em>)额外空间</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F" target="_blank" rel="external">基数排序</a>（radix sort）—O(<em>n</em>·<em>k</em>)；需要O(<em>n</em>)额外空间</li>
<li><a href="https://zh.wikipedia.org/w/index.php?title=%E4%BE%8F%E5%84%92%E6%8E%92%E5%BA%8F&amp;action=edit&amp;redlink=1" target="_blank" rel="external">侏儒排序</a>（gnome sort）— O(<em>n</em>2)</li>
<li><a href="https://zh.wikipedia.org/w/index.php?title=%E5%9C%96%E6%9B%B8%E9%A4%A8%E6%8E%92%E5%BA%8F&amp;action=edit&amp;redlink=1" target="_blank" rel="external">图书馆排序</a>（library sort）— O(<em>n</em> log <em>n</em>)期望时间；O(<em>n</em>2)最坏时间；需要(1+ε)<em>n</em>额外空间</li>
<li><a href="https://zh.wikipedia.org/w/index.php?title=%E5%A1%8A%E6%8E%92%E5%BA%8F&amp;action=edit&amp;redlink=1" target="_blank" rel="external">块排序</a>（block sort）— O(<em>n</em> log <em>n</em>)</li>
</ul>
<h3 id="不稳定的排序"><a href="#不稳定的排序" class="headerlink" title="不稳定的排序"></a>不稳定的排序</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E9%81%B8%E6%93%87%E6%8E%92%E5%BA%8F" target="_blank" rel="external">选择排序</a>（selection sort）—O(<em>n</em>2)</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F" target="_blank" rel="external">希尔排序</a>（shell sort）—O(<em>n</em> log2 <em>n</em>)如果使用最佳的现在版本</li>
<li><a href="https://zh.wikipedia.org/w/index.php?title=Clover%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95&amp;action=edit&amp;redlink=1" target="_blank" rel="external">Clover排序算法</a>（Clover sort）—O(n)期望时间，O(n2)最坏情况</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%A2%B3%E6%8E%92%E5%BA%8F" target="_blank" rel="external">梳排序</a>— O(<em>n</em> log <em>n</em>)</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%A0%86%E6%8E%92%E5%BA%8F" target="_blank" rel="external">堆排序</a>（heap sort）—O(<em>n</em> log <em>n</em>)</li>
<li><a href="https://zh.wikipedia.org/w/index.php?title=%E5%B9%B3%E6%BB%91%E6%8E%92%E5%BA%8F&amp;action=edit&amp;redlink=1" target="_blank" rel="external">平滑排序</a>（smooth sort）— O(<em>n</em> log <em>n</em>)</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" target="_blank" rel="external">快速排序</a>（quick sort）—O(<em>n</em> log <em>n</em>)期望时间，O(<em>n</em>2)最坏情况；对于大的、随机数列表一般相信是最快的已知排序</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%86%85%E7%9C%81%E6%8E%92%E5%BA%8F" target="_blank" rel="external">内省排序</a>（introsort）—O(<em>n</em> log <em>n</em>)</li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%80%90%E5%BF%83%E6%8E%92%E5%BA%8F" target="_blank" rel="external">耐心排序</a>（patience sort）—O(<em>n</em> log <em>n</em> + <em>k</em>)最坏情况时间，需要额外的O(<em>n</em> + <em>k</em>)空间，也需要找到<a href="https://zh.wikipedia.org/w/index.php?title=%E6%9C%80%E9%95%B7%E7%9A%84%E9%81%9E%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97&amp;action=edit&amp;redlink=1" target="_blank" rel="external">最长的递增子序列</a>（longest increasing subsequence）</li>
</ul>
<h3 id="不实用的排序"><a href="#不实用的排序" class="headerlink" title="不实用的排序"></a>不实用的排序</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/Bogo%E6%8E%92%E5%BA%8F" target="_blank" rel="external">Bogo排序</a>— O(<em>n</em> × <em>n</em>!)，最坏的情况下期望时间为无穷。</li>
<li><a href="https://zh.wikipedia.org/w/index.php?title=Stupid%E6%8E%92%E5%BA%8F&amp;action=edit&amp;redlink=1" target="_blank" rel="external">Stupid排序</a>—O(<em>n</em>3);递归版本需要O(<em>n</em>2)额外内存</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%8F%A0%E6%8E%92%E5%BA%8F" target="_blank" rel="external">珠排序</a>（bead sort）— O(<em>n</em>) or O(√<em>n</em>),但需要特别的硬件</li>
<li><a href="https://zh.wikipedia.org/w/index.php?title=%E7%85%8E%E9%A4%85%E6%8E%92%E5%BA%8F&amp;action=edit&amp;redlink=1" target="_blank" rel="external">煎饼排序</a>—O(<em>n</em>),但需要特别的硬件</li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%87%AD%E7%9A%AE%E5%8C%A0%E6%8E%92%E5%BA%8F" target="_blank" rel="external">臭皮匠排序</a>（stooge sort）算法简单，但需要约n^2.7的时间</li>
</ul>
<hr>
<h1 id="冒泡排序-Bubble-Sort"><a href="#冒泡排序-Bubble-Sort" class="headerlink" title="冒泡排序(Bubble Sort)"></a>冒泡排序(<strong>Bubble Sort</strong>)</h1><p>原理：重复比较两个相邻数据的大小，如果顺序错误就交换过来。</p>
<table>
<thead>
<tr>
<th>数据结构</th>
<th><a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E7%B5%84" target="_blank" rel="external">数组</a></th>
</tr>
</thead>
<tbody>
<tr>
<td>最差时间复杂度</td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6cd9594a16cb898b8f2a2dff9227a385ec183392" alt="O(n^{2})"></td>
</tr>
<tr>
<td>最优时间复杂度</td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/34109fe397fdcff370079185bfdb65826cb5565a" alt="O(n)"></td>
</tr>
<tr>
<td>平均时间复杂度</td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6cd9594a16cb898b8f2a2dff9227a385ec183392" alt="O(n^{2})"></td>
</tr>
<tr>
<td>最差空间复杂度</td>
<td>总共<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/34109fe397fdcff370079185bfdb65826cb5565a" alt="O(n)">，需要辅助空间<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e66384bc40452c5452f33563fe0e27e803b0cc21" alt="O(1)"></td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span><span class="params">(&amp;$x, &amp;$y)</span> </span>&#123;</span><br><span class="line">	$t = $x;</span><br><span class="line">	$x = $y;</span><br><span class="line">	$y = $t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort</span><span class="params">(&amp;$arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($arr) ; $i++)<span class="comment">//外层循环，找每个位置上最小的值</span></span><br><span class="line">		<span class="keyword">for</span> ($j = $i; $j &lt; count($arr); $j++)<span class="comment">//内存循环：负责去找第i个位置上最小的值</span></span><br><span class="line">			<span class="keyword">if</span> ($arr[$i] &gt; $arr[$j])</span><br><span class="line">				swap($arr[$i], $arr[$j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">21</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">82</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">70</span>);</span><br><span class="line">bubble_sort($arr);</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($arr); $i++)</span><br><span class="line">	<span class="keyword">echo</span> $arr[$i] . <span class="string">' '</span>;</span><br></pre></td></tr></table></figure>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p><img src="file:///../public/images/Sorting_quicksort_anim.gif" alt=""></p>
<p>步骤为：</p>
<ol>
<li>从数列中挑出一个元素，称为”基准”（pivot），</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为<strong>分区（partition）</strong>操作。</li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92" target="_blank" rel="external">递归</a>地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>
<p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span><span class="params">($arr)</span> </span>&#123;</span><br><span class="line">	$len = count($arr);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($len &lt;= <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> $arr;</span><br><span class="line"></span><br><span class="line">	$left = $right = <span class="keyword">array</span>();</span><br><span class="line">	$mid_value = $arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt; $len; $i++)</span><br><span class="line">		<span class="keyword">if</span> ($arr[$i] &lt; $mid_value)</span><br><span class="line">			$left[] = $arr[$i];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			$right[] = $arr[$i];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> array_merge(quick_sort($left), (<span class="keyword">array</span>)$mid_value,     quick_sort($right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">21</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">82</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">70</span>);</span><br><span class="line">$res = quick_sort($arr);</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($res); $i++)</span><br><span class="line">	<span class="keyword">echo</span> $res[$i] . <span class="string">' '</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="归并排序-Merge-sort"><a href="#归并排序-Merge-sort" class="headerlink" title="归并排序(Merge sort)"></a>归并排序(Merge sort)</h1><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针到达序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>
<h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>原理如下（假设序列共有n个元素）：</p>
<ol>
<li>将序列每相邻两个数字进行<a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F#.E5.BD.92.E5.B9.B6.E6.93.8D.E4.BD.9C" target="_blank" rel="external">归并操作</a>，形成<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/35200edc8015ec83f0aba3e626bef71fc54cd70d" alt="floor(n/2)">个序列，排序后每个序列包含两个元素</li>
<li>将上述序列再次归并，形成<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/d5b90a542243f61146ef791440c01775fa08941d" alt="floor(n/4)">个序列，每个序列包含四个元素</li>
<li>重复步骤2，直到所有元素排序完毕</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge_sort</span><span class="params">($arr)</span> </span>&#123;</span><br><span class="line">	$len = count($arr);</span><br><span class="line">	<span class="keyword">if</span> ($len &lt;= <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> $arr;</span><br><span class="line">	$half = ($len&gt;&gt;<span class="number">1</span>) + ($len &amp; <span class="number">1</span>);<span class="comment">//除以2，如果是奇数（最后一位为1，加1）</span></span><br><span class="line">	$arr2d = array_chunk($arr, $half);</span><br><span class="line">	$left = merge_sort($arr2d[<span class="number">0</span>]);</span><br><span class="line">	<span class="comment">// print_r($left);</span></span><br><span class="line">	$right = merge_sort($arr2d[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">while</span> (count($left) &amp;&amp; count($right))</span><br><span class="line">		<span class="keyword">if</span> ($left[<span class="number">0</span>] &lt; $right[<span class="number">0</span>])</span><br><span class="line">			$reg[] = array_shift($left);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			$reg[] = array_shift($right);</span><br><span class="line">		print_r(array_merge($reg, $left, $right));</span><br><span class="line">	<span class="keyword">return</span> array_merge($reg, $left, $right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">21</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">82</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">70</span>);</span><br><span class="line">$arr = merge_sort($arr);</span><br><span class="line"><span class="comment">// sort($arr);</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($arr); $i++) &#123;</span><br><span class="line">	<span class="keyword">echo</span> $arr[$i] . <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p><strong>选择排序</strong>（Selection sort）是一种简单直观的<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="external">排序算法</a>。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span><span class="params">(&amp;$x, &amp;$y)</span> </span>&#123;</span><br><span class="line">	$t = $x;</span><br><span class="line">	$x = $y;</span><br><span class="line">	$y = $t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selection_sort</span><span class="params">(&amp;$arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($arr) - <span class="number">1</span>; $i++) &#123;</span><br><span class="line">		$min = $i;</span><br><span class="line">		<span class="keyword">for</span> ($j = $i + <span class="number">1</span>; $j &lt; count($arr); $j++)</span><br><span class="line">			<span class="keyword">if</span> ($arr[$min] &gt; $arr[$j])</span><br><span class="line">				$min = $j;</span><br><span class="line">		swap($arr[$min], $arr[$i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p><strong>桶排序（Bucket sort）</strong>或所谓的<strong>箱排序</strong>，是一个<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="external">排序算法</a>，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="external">排序算法</a>或是以递归方式继续使用桶排序进行排序）。桶排序是<a href="https://zh.wikipedia.org/wiki/%E9%B4%BF%E5%B7%A2%E6%8E%92%E5%BA%8F" target="_blank" rel="external">鸽巢排序</a>的一种归纳结果。当要被排序的数组内的数值是均匀分配的时候，桶排序使用线性时间（<a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7" target="_blank" rel="external">Θ</a>(<em>n</em>)）。但桶排序并不是<a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E6%8E%92%E5%BA%8F" target="_blank" rel="external">比较排序</a>，他不受到O(n log n)下限的影响。</p>
<p>桶排序以下列程序进行：</p>
<ol>
<li>设置一个定量的数组当作空桶子。</li>
<li>寻访序列，并且把项目一个一个放到对应的桶子去。</li>
<li>对每个不是空的桶子进行排序。</li>
<li>从不是空的桶子里把项目再放回原来的序列中。</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bucket_sort</span><span class="params">(&amp;$elements)</span> </span>&#123;</span><br><span class="line">  $n = count($elements);</span><br><span class="line">  $buckets = <span class="keyword">array</span>();</span><br><span class="line">  <span class="comment">// Initialize the buckets.</span></span><br><span class="line">  <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">    $buckets[$i] = <span class="keyword">array</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Put each element into matched bucket.</span></span><br><span class="line">  <span class="keyword">foreach</span> ($elements <span class="keyword">as</span> $el) &#123;</span><br><span class="line">    array_push($buckets[ceil($el/<span class="number">10</span>)], $el);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Sort elements in each bucket using insertion sort.</span></span><br><span class="line">  $j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">    <span class="comment">// sort only non-empty bucket</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($buckets[$i])) &#123;</span><br><span class="line">      merge_sort($buckets[$i]);<span class="comment">//调用归并排序实现桶内数据的排序</span></span><br><span class="line">      <span class="comment">// Move sorted elements in the bucket into original array.</span></span><br><span class="line">      <span class="keyword">foreach</span> ($buckets[$i] <span class="keyword">as</span> $el) &#123;</span><br><span class="line">        $elements[$j++] = $el;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSRF/XSS/SQL注入]]></title>
      <url>http://hu820.github.io/2016/06/13/CSRF-XSS-SQL%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><blockquote>
<p><strong>跨站请求伪造</strong>（英语：Cross-site request forgery），也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</p>
</blockquote>
<p>举个栗子：</p>
<blockquote>
<p>宅男用户x在某银行网站b.com上正准备付款，突然QQ上弹出消息，说你中奖苹果电脑一台了，点击进去一看，何种输入验证码，准备收货。开心回到银行继续付款，却被提示余额不足，宅男摸摸头，难道我记错了……</p>
</blockquote>
<p>点评：<strong>不能怪咱们的用户，只能说骗子手法很隐蔽</strong></p>
<p><em>咱们来看看上面过程中，骗子是怎么完成一次攻击的</em></p>
<ul>
<li><strong>技术分析</strong></li>
</ul>
<p>当用户x点击QQ消息中的链接跳转到网站a.com时，黑客会在网站a.com向用于原网站b.com发送一个请求，由于用户已经在银行网站b.com登录，根据浏览器同源法则，浏览器会自动带上用户在b.com域名下的cookie。由于服务端鉴权是通过cookie鉴定的，所以，如果服务端没有校验本次请求的合法性，通过了该伪造请求的操作。可以是发表一篇日子，说说（借钱），甚至是发起一笔转账….，后果可想而知。</p>
<p>具体实现更是层出不穷，防不慎防，比如：在黑客网站放置一张看不见的图片</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=http:<span class="comment">//www.b.com/Transfer.php?toUserId=c&amp;money=1000000&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，用户点击后会构造了一个GET请求。</p>
<p>POST请求稍微麻烦一点，但是同样可以实现，构造一个form submit即可。</p>
<ul>
<li><strong>CSRF的防御之道</strong></li>
</ul>
<p>目前业界对CSRF的防御主要有三种：</p>
<ol>
<li>验证HTTP Referer字段</li>
<li>在请求中添加token字段，后台服务端验证token是否合法</li>
</ol>
<h5 id="验证HTTP-Referer字段"><a href="#验证HTTP-Referer字段" class="headerlink" title="验证HTTP Referer字段"></a>验证HTTP Referer字段</h5><p>这应该是咱们的第一反应，既然来源不合法，那咱们校验下来源就行了。事实也确实是如此，伪造请求的http头部referer字段确实不是咱们自己的站点，而是伪造网站自己的，如上面假设的a.com。这种办法的优点是简单易行，工作量很低，但是这种方法也有其局限性，因为完全依赖浏览器发送正确的referer字段，无法保证浏览器的具体实现，也没办法确认是否有漏洞可以恶意伪造。</p>
<h5 id="添加token校验"><a href="#添加token校验" class="headerlink" title="添加token校验"></a>添加token校验</h5><p>由于CSRF的本质在于欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再执行CSRF攻击。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token = MD5(UID*SALT)</span><br></pre></td></tr></table></figure>
<p>服务端拿到token之后，用相同的算法对UID进行运算后得到服务端的token，与客户端的token进行比较，不相等即可以判断为非法。</p>
<p>这个算法的实质在于利用了浏览器的同源策略，b.com下的cookie在a.com下是无法拿到的，因此黑客也就无法伪造出正确的token。加上MD5和SALT的主要目的是为了增加破解成本。</p>
<hr>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><blockquote>
<p>待续</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用markdown写作]]></title>
      <url>http://hu820.github.io/2016/06/12/%E7%94%A8markdown%E5%86%99%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>作者：<strong>arihu</strong></p>
<h2 id="1-赶快用markdown写作？"><a href="#1-赶快用markdown写作？" class="headerlink" title="1 赶快用markdown写作？"></a>1 赶快用markdown写作？</h2><ul>
<li><p>markdown的优点如下：</p>
<ul>
<li>纯文本，兼容性极强，几乎可以用任何文本编辑器打开</li>
<li>让你专注文字，而不是拍版</li>
<li>格式转换方便，Markdown的文本可以轻松转换为html，电子书，pdf等各式</li>
<li>Markdown的标记语法可读性很好</li>
</ul>
<p>本文全部由markdown编辑而成，我们推崇markdown，必定会通过本文，让你大概了解markdown，学会使用markdown。</p>
</li>
</ul>
<h2 id="2-那些人要用markdown写作？"><a href="#2-那些人要用markdown写作？" class="headerlink" title="2 .那些人要用markdown写作？"></a>2 .那些人要用markdown写作？</h2><p>markdown是为那些经常需要码字或者进行文字排版的人群设计的，他们希望用键盘啪啪啪地打出来后就已经排好版了，最好从头到尾不需要用鼠标，这些人包括经常需要写文档的码农，博客写手，网战小编，出版社人士等。</p>
<h2 id="3-markdown语法难吗？"><a href="#3-markdown语法难吗？" class="headerlink" title="3.markdown语法难吗？"></a>3.markdown语法难吗？</h2><p>markdown主要的语法全部由一些符号组成，这些符号经过了精挑细选，一目了然。比如：在文本的两旁加上星号，看起来就像强调。markdown的区块引用看起来就真的像是引用一段文字。这就是我使用markdown的理由和学习动力。</p>
<h2 id="4-markdown实战"><a href="#4-markdown实战" class="headerlink" title="4.markdown实战"></a>4.markdown实战</h2><p>废话不多说，咱们开始学习markdown。</p>
<p><em>welcome to markdown</em></p>
<p><strong>标题</strong></p>
<p>在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，</p>
<blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; # 这是大标题H1</span></span><br><span class="line"><span class="quote">&gt; ##这是二级标题H2</span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br><span class="line"><span class="quote">&gt; ######这是H6</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是大标题H1</span><br><span class="line">&gt; 这是二级标题H2</span><br><span class="line">&gt; .....</span><br><span class="line">&gt; 这是H6</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>区块引用</strong></p>
<p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。在每行的最前面加上 <code>&gt;</code> 就真的看起来引用</p>
<blockquote>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span></span><br><span class="line"><span class="quote">&gt; &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span></span><br><span class="line"><span class="quote">&gt; &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span></span><br><span class="line"><span class="quote">&gt; &gt; </span></span><br><span class="line"><span class="quote">&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span></span><br><span class="line"><span class="quote">&gt; &gt; id sem consectetuer libero luctus adipiscing.</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
</blockquote>
<p>上面如果你偷懒在每一个段落的第一行加上>也是可以的</p>
<p>在引用的区块内也是可以使用markdown语法的哦，包括标题，列表，代码等</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;##这是一个标题</span><br><span class="line"><span class="quote">&gt;</span><br><span class="line">&gt;* 这是第一行列表项</span></span><br><span class="line">&gt;* 这是第二行列表项</span><br><span class="line"><span class="quote">&gt;</span><br><span class="line">&gt;下面是程序员们的最爱的代码哦</span></span><br><span class="line"><span class="quote">&gt;</span><br><span class="line">&gt; return shell_exec("echo $input | $markdown_script");</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<h2 id="这是一个标题"><a href="#这是一个标题" class="headerlink" title="这是一个标题"></a>这是一个标题</h2><ul>
<li>这是第一行列表项</li>
<li>这是第二行列表项</li>
</ul>
<p>下面是程序员们的最爱的代码哦</p>
<p>return shell_exec(“echo $input | $markdown_script”);</p>
</blockquote>
<p><strong>列表</strong></p>
<p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号、加号或是减号作为列表标记：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>red</span><br><span class="line"><span class="bullet">* </span>green</span><br><span class="line"><span class="bullet">* </span>blue</span><br></pre></td></tr></table></figure>
<p>记得* 后面留个空格哦</p>
<p>上面的语法也和下面的等价</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+ </span>red</span><br><span class="line"><span class="bullet">+ </span>green</span><br><span class="line"><span class="bullet">+ </span>blue</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>red</span><br><span class="line"><span class="bullet">- </span>green</span><br><span class="line"><span class="bullet">- </span>blue</span><br></pre></td></tr></table></figure>
<hr>
<p>结果都是下面介样子</p>
<ul>
<li>red</li>
<li>green</li>
<li>blue</li>
</ul>
<p>有序列表则使用数字接着一个英文句点：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>tencent</span><br><span class="line"><span class="bullet">2. </span>baidu</span><br><span class="line"><span class="bullet">3. </span>alibaba</span><br></pre></td></tr></table></figure>
<hr>
<ol>
<li><p>tencent</p>
</li>
<li><p>baidu</p>
</li>
<li><p>alibaba</p>
<p>​</p>
<p>​</p>
</li>
</ol>
<p><strong>一个综合例子</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; **Note:**</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; - Full access to **Google Drive** or **Dropbox** is required to be able to import any document in StackEdit. Permission restrictions can be configured in the settings.</span></span><br><span class="line"><span class="quote">&gt; - Imported documents are downloaded in your browser and are not transmitted to a server.</span></span><br><span class="line"><span class="quote">&gt; - If you experience problems saving your documents on Google Drive, check and optionally disable browser extensions, such as Disconnect.</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>Full access to <strong>Google Drive</strong> or <strong>Dropbox</strong> is required to be able to import any document in StackEdit. Permission restrictions can be configured in the settings. </li>
<li>Imported documents are downloaded in your browser and are not transmitted to a server.</li>
<li>If you experience problems saving your documents on Google Drive, check and optionally disable browser extensions, such as Disconnect.</li>
</ul>
</blockquote>
<p><strong>代码区块</strong></p>
<p>程序员哥哥最喜欢的就是在markdown下面写作，记录代码片段，markdown的处理很简单。<em>只要简单地缩进 4 个空格或是 1 个制表符就可以</em></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我的代码在下面</span><br><span class="line"><span class="code">	这是一段代码哈，你会怎么显示呢？</span></span><br><span class="line"><span class="code">	public function is_you($id)&#123;</span></span><br><span class="line"><span class="code">		return $id==10086?true:false;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="code">	&lt;p&gt;这是一段html&lt;/p&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理</p>
<p><strong>分割线</strong></p>
<p>三个或者三个以上的星星，减号，底线就建立了一个分割线</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="section">*****</span><br><span class="line">----</span></span><br><span class="line"><span class="strong">_____</span>_</span><br></pre></td></tr></table></figure>
<p><strong>链接</strong></p>
<p>在 Markdown 中，插入链接不需要其他按钮，你只需要使用 <code>[显示文本](链接地址)</code> 这样的语法即可，例如：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">百度</span>](<span class="link">https://baidu.com</span>)</span><br></pre></td></tr></table></figure>
<hr>
<p><a href="https://baidu.com" target="_blank" rel="external">百度</a></p>
<p>图片的使用和链接很像，在前面加个！就好了</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](http://a.hiphotos.baidu.com/image/h%3D200/sign=ff2f518d9c504fc2bd5fb705d5dce7f0/7e3e6709c93d70cfebc67788ffdcd100baa12b73.jpg)</span><br></pre></td></tr></table></figure>
<p><img src="http://a.hiphotos.baidu.com/image/h%3D200/sign=ff2f518d9c504fc2bd5fb705d5dce7f0/7e3e6709c93d70cfebc67788ffdcd100baa12b73.jpg" alt=""></p>
<p><strong>强调</strong></p>
<p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>标签包围，用两个 `*` 或`_` 包起来的话，则会被转成</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*single asterisks*</span><br><span class="line"></span><br><span class="line">_single underscores_</span><br><span class="line"></span><br><span class="line">**double asterisks**</span><br><span class="line"></span><br><span class="line">__double underscores__</span><br></pre></td></tr></table></figure>
<hr>
<p><em>single asterisks</em></p>
<p>single underscores</p>
<p><em><strong>double asterisks</strong></em></p>
<p><em>double underscores</em></p>
<p><em>代码</em></p>
<p>如果要标记一小段行内代码，你可以用反引号把它包起来（<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>Use the <code>printf()</code> function.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Use the `printf()` function.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*表格*</span><br><span class="line"></span><br><span class="line">表格的语法更简单，直接用|表示就好了</span><br><span class="line"></span><br><span class="line">```markdown</span><br><span class="line">|Item|value|</span><br><span class="line">-----|----</span><br><span class="line">china|$190000000</span><br><span class="line">usa|$2800000</span><br><span class="line">spain|$8900</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>Item</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>china</td>
<td>$190000000</td>
</tr>
<tr>
<td>usa</td>
<td>$2800000</td>
</tr>
<tr>
<td>spain</td>
<td>$8900</td>
</tr>
</tbody>
</table>
<p>如果你想指定对其方式，你可以这样做</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Item     | Value | Qty   |</span><br><span class="line">| :------- | ----: | :---: |</span><br><span class="line">| Computer | $1600 |  5    |</span><br><span class="line">| Phone    | $12   |  12   |</span><br><span class="line">| Pipe     | $1    |  234  |</span><br></pre></td></tr></table></figure>
<h2 id="markdown编辑器推荐"><a href="#markdown编辑器推荐" class="headerlink" title="markdown编辑器推荐"></a>markdown编辑器推荐</h2><ul>
<li><p>在线：</p>
<ul>
<li><a href="https://stackedit.io/editor" target="_blank" rel="external">StackEdit</a></li>
</ul>
</li>
<li><p>离线</p>
<ul>
<li><p><a href="https://www.typora.io/" target="_blank" rel="external">typroa</a></p>
<p>​</p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
